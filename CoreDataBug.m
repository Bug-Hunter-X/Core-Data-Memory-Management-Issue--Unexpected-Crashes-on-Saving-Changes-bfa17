In Objective-C, a common yet subtle issue arises when dealing with memory management, particularly with Core Data.  Consider a scenario where you fetch managed objects from a Core Data context, modify them, and then attempt to save the changes.  If you don't properly handle the lifecycle of these objects (particularly if you're using NSFetchedResultsController) and retain them beyond their necessary lifetime, you may encounter unexpected crashes or data inconsistencies.  For example, if you retain a fetched object in a view controller that outlives its context, saving the context might encounter an error and fail silently, leading to data loss or corruption. This is because the context's lifetime is often tied to a particular thread or view's lifecycle, and keeping references to its objects in a longer-lived object can break the relationship and violate Core Data's internal consistency checks. 